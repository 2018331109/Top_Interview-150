150. Evaluate Reverse Polish Notation

STATEMENT
You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation.
Evaluate the expression. Return an integer that represents the value of the expression.
Note that:
   - The valid operators are '+', '-', '*', and '/'.
   - Each operand may be an integer or another expression.
   - The division between two integers always truncates toward zero.
   - There will not be any division by zero.
   - The input represents a valid arithmetic expression in a reverse polish notation.
   - The answer and all the intermediate calculations can be represented in a 32-bit integer.

SOLUTION
class Solution
{
public:
    int evalRPN(vector<string>& tokens)
    {
        unordered_map<string, function<int (int, int)>> mp={
            {
                "+", [](int a, int b)
                {
                    return a+b;
                }
            },
            {
                "-", [](int a, int b)
                {
                    return a-b;
                }
            },
            {
                "*", [](int a, int b)
                {
                    return a*b;
                }
            },
            {
                "/", [](int a, int b)
                {
                    return a/b;
                }
            }
        };
        
        stack<int>st;
        for(string& str:tokens)
        {
            if(!mp.count(str))
            {
                st.push(stoi(str));
            }
            else
            {
                int op1=st.top();
                st.pop();
                int op2=st.top();
                st.pop();
                st.push(mp[str] (op2, op1));
            }
        }
        
        return st.top();

    }
};


