373. Find K Pairs with Smallest Sums

STATEMENT
You are given two integer arrays nums1 and nums2 sorted in non-decreasing order and an integer k.
Define a pair (u, v) which consists of one element from the first array and one element from the second array.
Return the k pairs (u1, v1), (u2, v2), ..., (uk, vk) with the smallest sums.

SOLUTION
I am making some changes here!!!

C++
class Solution
{
public:
    vector<vector<int>> kSmallestPairs(vector<int>& nums1, vector<int>& nums2, int k)
    {
        priority_queue<pair<int, pair<int, int>>> pq;
        int n = nums1.size(), m = nums2.size();

        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < m; j++)
            {
                int sum = nums1[i] + nums2[j];
                if (pq.size() < k)
                {
                    pq.push({sum, {nums1[i], nums2[j]}});
                }
                else
                {
                    int vl = pq.top().first;
                    if (sum < vl)
                    {
                        pq.push({sum, {nums1[i], nums2[j]}});
                        pq.pop();
                    }
                    else
                    {
                        break;
                    }
                }
            }
        }

        vector<vector<int>> result;
        while (!pq.empty())
        {
            auto top = pq.top();
            pq.pop();
            result.push_back({top.second.first, top.second.second});
        }
        reverse(result.begin(), result.end());
        return result;
    }
};


PYTHON
import heapq


class Solution:
    def kSmallestPairs(self, nums1, nums2, k):
        pq = []  # Max-heap
        n, m = len(nums1), len(nums2)

        for i in range(n):
            for j in range(m):
                total = nums1[i] + nums2[j]
                if len(pq) < k:
                    # Use negative total for max-heap
                    heapq.heappush(pq, (-total, (nums1[i], nums2[j])))
                else:
                    vl, (a, b) = heapq.heappop(pq)
                    vl=-vl  # Get the largest sum (negative value)
                    if total < vl:
                        #heapq.heappop(pq)  # Remove the largest sum
                        heapq.heappush(pq, (-total, (nums1[i], nums2[j])))
                    else:
                        heapq.heappush(pq, (-vl, (a, b)))
                        break

        result = []
        while pq:
            vl, (a, b) = heapq.heappop(pq)
            result.append([a, b])

        result.reverse()
        return result
