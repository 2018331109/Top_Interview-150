63. Unique Paths II

STATEMENT
You are given an m x n integer array grid. There is a robot initially located at the top-left corner 
(i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). 
The robot can only move either down or right at any point in time.
An obstacle and space are marked as 1 or 0 respectively in grid. A path that the robot takes cannot 
include any square that is an obstacle.
Return the number of possible unique paths that the robot can take to reach the bottom-right corner.
The testcases are generated so that the answer will be less than or equal to 2 * 10^9.

SOLUTION
 //#include<bits/stdc++.h>
//using namespace std;

class Solution
{
public:
    int dp[109][109];

    int solve(vector<vector<int>>& obstacleGrid, int i, int j)
    {
        int m=obstacleGrid.size();
        int n=obstacleGrid[0].size();

        if(i==obstacleGrid.size()-1 && j==obstacleGrid[0].size()-1 && obstacleGrid[i][j]!=1)
        {
            return 1;
        }

        if(i==obstacleGrid.size() || j==obstacleGrid[0].size() || obstacleGrid[i][j]==1)
        {
            return 0;
        }

        if(dp[i][j]!=-1)
        {
            return dp[i][j];
        }

        return dp[i][j]=solve(obstacleGrid,i+1,j)+solve(obstacleGrid,i,j+1);
    }
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid)
    {
        int m=obstacleGrid.size();
        int n=obstacleGrid[0].size();

        if(obstacleGrid[m-1][n-1]==1)
        {
            return 0;
        }

        memset(dp, -1, sizeof(dp));

        return solve(obstacleGrid, 0, 0);
    }
};
