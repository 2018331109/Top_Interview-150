200. Number of Islands

STATEMENT
Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.
An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. 
You may assume all four edges of the grid are all surrounded by water.

SOLUTION

C++
class Solution
{
public:
    bool done[309][309];
    int x=0, y=0;
    //void dfs(bool done[x][y], vector<vector<char>>& grid)
    void dfs(int x, int y, vector<vector<char>>& grid)
    {
        int n = grid.size();
        int m = grid[0].size();
        //done[x][y]=true;
        // the following is the base case:
        if (x < 0 || x >= n || y < 0 || y >= m || grid[x][y] == '0')
        {
            return;
        }

        grid[x][y] = '0';
        dfs(x + 1, y, grid);
        dfs(x, y + 1, grid);
        /*
                grid = [
                           ["1", "1", "1"],
                           ["0", "1", "0"],
                           ["1", "1", "1"]
                       ]
        */
        // for the above case these two call is needed.
        dfs(x - 1, y, grid);
        dfs(x, y - 1, grid);
        /*
                if(x+1<n && done[x+1][y]==false)
                {
                    dfs(done[x+1][y], grid);
                }

                if(y+1<m && done[x][y+1]==false)
                {
                    dfs(done[x][y+1], grid);
                }

                return;
        */

    }
    int numIslands(vector<vector<char>>& grid)
    {
        int n=grid.size();
        int m=grid[0].size();
        int cnt=0;
        //bool done[n][m];
        for(int i=0; i<n; i++)
        {
            for(int j=0; j<m; j++)
            {
                //if (done[i][j]==false)
                if (grid[i][j] == '1')
                {
                    cnt++;
                    //dfs(done[i][j], grid)
                    dfs(i, j, grid);

                }
            }
        }

        return cnt;

    }
};
